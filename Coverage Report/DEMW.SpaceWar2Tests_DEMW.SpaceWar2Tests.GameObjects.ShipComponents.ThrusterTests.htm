<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html><head><title>DEMW.SpaceWar2Tests.GameObjects.ShipComponents.ThrusterTests - Coverage Report</title>
<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
<link rel="stylesheet" type="text/css" href="report.css" />

</head><body><div class="container">
<h1>Summary</h1>
<table class="overview">
<colgroup>
<col width="130" />
<col />
</colgroup>
<tr><th>Class:</th><td>DEMW.SpaceWar2Tests.GameObjects.ShipComponents.ThrusterTests</td></tr>
<tr><th>Assembly:</th><td>DEMW.SpaceWar2Tests</td></tr>
<tr><th>File(s):</th><td><a href="#CUsersDaveDocumentsVisualStudio2010ProjectsSpaceWar2SpaceWar2TestsGameObjectsShipComponentsThrusterTestscs">C:\Users\Dave\Documents\Visual Studio 2010\Projects\SpaceWar2\SpaceWar2Tests\GameObjects\ShipComponents\ThrusterTests.cs</a></td></tr>
<tr><th>Coverage:</th><td>100%</td></tr>
<tr><th>Covered lines:</th><td>65</td></tr>
<tr><th>Coverable lines:</th><td>65</td></tr>
<tr><th>Total lines:</th><td>134</td></tr>
</table>
<h1>Metrics</h1>
<table class="overview">
<tr><th>Method</th><th>Cyclomatic Complexity</th><th>Sequence Coverage</th><th>Branch Coverage</th></tr>
<tr><td title="System.Void DEMW.SpaceWar2Tests.GameObjects.ShipComponents.ThrusterTests::Setup()">Setup()</td><td>1</td><td>100</td><td>100</td></tr>
<tr><td title="System.Void DEMW.SpaceWar2Tests.GameObjects.ShipComponents.ThrusterTests::Thruster_maxEnergyDraw_cannot_be_zero()">Thruster_maxEnergyDraw_cannot_be_zero()</td><td>1</td><td>100</td><td>100</td></tr>
<tr><td title="System.Void DEMW.SpaceWar2Tests.GameObjects.ShipComponents.ThrusterTests::Thruster_maxEnergyDraw_cannot_be_negative()">Thruster_maxEnergyDraw_cannot_be_negative()</td><td>1</td><td>100</td><td>100</td></tr>
<tr><td title="System.Void DEMW.SpaceWar2Tests.GameObjects.ShipComponents.ThrusterTests::Throttle_can_be_set_to_a_value_between_zero_and_one()">Throttle_can_be_set_to_a_value_between_zero_and_one()</td><td>1</td><td>100</td><td>100</td></tr>
<tr><td title="System.Void DEMW.SpaceWar2Tests.GameObjects.ShipComponents.ThrusterTests::Throttle_is_zero_if_it_is_set_below_zero()">Throttle_is_zero_if_it_is_set_below_zero()</td><td>1</td><td>100</td><td>100</td></tr>
<tr><td title="System.Void DEMW.SpaceWar2Tests.GameObjects.ShipComponents.ThrusterTests::Throttle_is_one_if_it_is_set_above_one()">Throttle_is_one_if_it_is_set_above_one()</td><td>1</td><td>100</td><td>100</td></tr>
<tr><td title="System.Void DEMW.SpaceWar2Tests.GameObjects.ShipComponents.ThrusterTests::EnergyRequired_is_Throttle_times_max_Energy_draw()">EnergyRequired_is_Throttle_times_max_Energy_draw()</td><td>1</td><td>100</td><td>100</td></tr>
<tr><td title="System.Void DEMW.SpaceWar2Tests.GameObjects.ShipComponents.ThrusterTests::Engage_produces_no_force_when_no_Throttle_and_full_energyScalingFactor()">Engage_produces_no_force_when_no_Throttle_and_full_energyScalingFactor()</td><td>1</td><td>100</td><td>100</td></tr>
<tr><td title="System.Void DEMW.SpaceWar2Tests.GameObjects.ShipComponents.ThrusterTests::Engage_produces_no_force_when_some_Throttle_and_zero_energyScalingFactor()">Engage_produces_no_force_when_some_Throttle_and_zero_energyScalingFactor()</td><td>1</td><td>100</td><td>100</td></tr>
<tr><td title="System.Void DEMW.SpaceWar2Tests.GameObjects.ShipComponents.ThrusterTests::Engage_produces_no_force_when_some_Throttle_and_negative_energyScalingFactor()">Engage_produces_no_force_when_some_Throttle_and_negative_energyScalingFactor()</td><td>1</td><td>100</td><td>100</td></tr>
<tr><td title="System.Void DEMW.SpaceWar2Tests.GameObjects.ShipComponents.ThrusterTests::Engage_produces_full_force_when_full_Throttle_and_full_energyScalingFactor()">Engage_produces_full_force_when_full_Throttle_and_full_energyScalingFactor()</td><td>1</td><td>100</td><td>100</td></tr>
<tr><td title="System.Void DEMW.SpaceWar2Tests.GameObjects.ShipComponents.ThrusterTests::Engage_produces_force_proportional_to_Throttle_time_by_energyScalingFactor()">Engage_produces_force_proportional_to_Throttle_time_by_energyScalingFactor()</td><td>1</td><td>100</td><td>100</td></tr>
<tr><td title="System.Void DEMW.SpaceWar2Tests.GameObjects.ShipComponents.ThrusterTests::Engage_caps_energyScalingFactor_to_one()">Engage_caps_energyScalingFactor_to_one()</td><td>1</td><td>100</td><td>100</td></tr>
</table>
<h1>File(s)</h1>
<h2 id="CUsersDaveDocumentsVisualStudio2010ProjectsSpaceWar2SpaceWar2TestsGameObjectsShipComponentsThrusterTestscs">C:\Users\Dave\Documents\Visual Studio 2010\Projects\SpaceWar2\SpaceWar2Tests\GameObjects\ShipComponents\ThrusterTests.cs</h2>
<table>
<tr><th></th><th>#</th><th>Line</th><th>Coverage</th></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>1</code></td><td class="light"><code>using&nbsp;System;</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>2</code></td><td class="light"><code>using&nbsp;DEMW.SpaceWar2.GameObjects.ShipComponents;</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>3</code></td><td class="light"><code>using&nbsp;Microsoft.Xna.Framework;</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>4</code></td><td class="light"><code>using&nbsp;NUnit.Framework;</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>5</code></td><td class="light"><code></code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>6</code></td><td class="light"><code>namespace&nbsp;DEMW.SpaceWar2Tests.GameObjects.ShipComponents</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>7</code></td><td class="light"><code>{</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>8</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;[TestFixture]</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>9</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;ThrusterTests</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>10</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>11</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Thruster&nbsp;_thruster;</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>12</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Vector2&nbsp;_position;</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>13</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;Vector2&nbsp;_direction;</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>14</code></td><td class="light"><code></code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>15</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[SetUp]</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>16</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Setup()</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">12</td><td class="right"><code>17</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">12</td><td class="right"><code>18</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_position&nbsp;=&nbsp;new&nbsp;Vector2(1,&nbsp;1);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">12</td><td class="right"><code>19</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_direction&nbsp;=&nbsp;new&nbsp;Vector2(0,&nbsp;-1);</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>20</code></td><td class="light"><code></code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">12</td><td class="right"><code>21</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_thruster&nbsp;=&nbsp;new&nbsp;Thruster(_position,&nbsp;_direction,&nbsp;0.1f);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">12</td><td class="right"><code>22</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>23</code></td><td class="light"><code></code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>24</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Test]</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>25</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Thruster_maxEnergyDraw_cannot_be_zero()</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>26</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">2</td><td class="right"><code>27</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;exception&nbsp;=&nbsp;Assert.Throws&lt;ArgumentException&gt;(()&nbsp;=&gt;&nbsp;_thruster&nbsp;=&nbsp;new&nbsp;Thruster(_position,&nbsp;_direction,&nbsp;0f));</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>28</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(&quot;Must&nbsp;be&nbsp;positive&nbsp;and&nbsp;non-zero.\r\nParameter&nbsp;name:&nbsp;maxEnergyDraw&quot;,&nbsp;exception.Message);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>29</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>30</code></td><td class="light"><code></code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>31</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Test]</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>32</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Thruster_maxEnergyDraw_cannot_be_negative()</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>33</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">2</td><td class="right"><code>34</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;exception&nbsp;=&nbsp;Assert.Throws&lt;ArgumentException&gt;(()&nbsp;=&gt;&nbsp;_thruster&nbsp;=&nbsp;new&nbsp;Thruster(_position,&nbsp;_direction,&nbsp;-0.1f</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>35</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(&quot;Must&nbsp;be&nbsp;positive&nbsp;and&nbsp;non-zero.\r\nParameter&nbsp;name:&nbsp;maxEnergyDraw&quot;,&nbsp;exception.Message);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>36</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>37</code></td><td class="light"><code></code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>38</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Test]</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>39</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Throttle_can_be_set_to_a_value_between_zero_and_one()</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>40</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>41</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_thruster.Throttle&nbsp;=&nbsp;0.4f;</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>42</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(0.4f,&nbsp;_thruster.Throttle);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>43</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>44</code></td><td class="light"><code></code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>45</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Test]</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>46</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Throttle_is_zero_if_it_is_set_below_zero()</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>47</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>48</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_thruster.Throttle&nbsp;=&nbsp;-0.4f;</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>49</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(0f,&nbsp;_thruster.Throttle);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>50</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>51</code></td><td class="light"><code></code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>52</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Test]</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>53</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Throttle_is_one_if_it_is_set_above_one()</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>54</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>55</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_thruster.Throttle&nbsp;=&nbsp;1.4f;</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>56</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(1f,&nbsp;_thruster.Throttle);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>57</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>58</code></td><td class="light"><code></code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>59</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Test]</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>60</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;EnergyRequired_is_Throttle_times_max_Energy_draw()</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>61</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>62</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_thruster.Throttle&nbsp;=&nbsp;0.4f;</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>63</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(0.4f&nbsp;*&nbsp;0.1f,&nbsp;_thruster.EnergyRequired);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>64</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>65</code></td><td class="light"><code></code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>66</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Test]</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>67</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Engage_produces_no_force_when_no_Throttle_and_full_energyScalingFactor()</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>68</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>69</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;float&nbsp;energyScalingFactor&nbsp;=&nbsp;1f;</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>70</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_thruster.Throttle&nbsp;=&nbsp;0f;</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>71</code></td><td class="light"><code></code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>72</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;force&nbsp;=&nbsp;_thruster.Engage(energyScalingFactor);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>73</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(_position,&nbsp;force.Displacement);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>74</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(Vector2.Zero,&nbsp;force.Vector);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>75</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>76</code></td><td class="light"><code></code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>77</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Test]</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>78</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Engage_produces_no_force_when_some_Throttle_and_zero_energyScalingFactor()</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>79</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>80</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;float&nbsp;energyScalingFactor&nbsp;=&nbsp;0f;</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>81</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_thruster.Throttle&nbsp;=&nbsp;0.8f;</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>82</code></td><td class="light"><code></code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>83</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;force&nbsp;=&nbsp;_thruster.Engage(energyScalingFactor);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>84</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(_position,&nbsp;force.Displacement);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>85</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(Vector2.Zero,&nbsp;force.Vector);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>86</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>87</code></td><td class="light"><code></code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>88</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Test]</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>89</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Engage_produces_no_force_when_some_Throttle_and_negative_energyScalingFactor()</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>90</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>91</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;float&nbsp;energyScalingFactor&nbsp;=&nbsp;-0.2f;</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>92</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_thruster.Throttle&nbsp;=&nbsp;0.8f;</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>93</code></td><td class="light"><code></code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>94</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;force&nbsp;=&nbsp;_thruster.Engage(energyScalingFactor);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>95</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(_position,&nbsp;force.Displacement);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>96</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(Vector2.Zero,&nbsp;force.Vector);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>97</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>98</code></td><td class="light"><code></code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>99</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Test]</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>100</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Engage_produces_full_force_when_full_Throttle_and_full_energyScalingFactor()</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>101</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>102</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;float&nbsp;energyScalingFactor&nbsp;=&nbsp;1f;</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>103</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_thruster.Throttle&nbsp;=&nbsp;1f;</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>104</code></td><td class="light"><code></code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>105</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;force&nbsp;=&nbsp;_thruster.Engage(energyScalingFactor);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>106</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(_position,&nbsp;force.Displacement);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>107</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(_direction,&nbsp;force.Vector);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>108</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>109</code></td><td class="light"><code></code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>110</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Test]</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>111</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Engage_produces_force_proportional_to_Throttle_time_by_energyScalingFactor()</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>112</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>113</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;float&nbsp;energyScalingFactor&nbsp;=&nbsp;0.8f;</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>114</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_thruster.Throttle&nbsp;=&nbsp;0.5f;</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>115</code></td><td class="light"><code></code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>116</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;force&nbsp;=&nbsp;_thruster.Engage(energyScalingFactor);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>117</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(_position,&nbsp;force.Displacement);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>118</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(_direction&nbsp;*&nbsp;energyScalingFactor&nbsp;*&nbsp;_thruster.Throttle,&nbsp;force.Vector);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>119</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>120</code></td><td class="light"><code></code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>121</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[Test]</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>122</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;void&nbsp;Engage_caps_energyScalingFactor_to_one()</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>123</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>124</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;float&nbsp;energyScalingFactor&nbsp;=&nbsp;1.5f;</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>125</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;float&nbsp;expectedCappedEnergyScalingFactor&nbsp;=&nbsp;1f;</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>126</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_thruster.Throttle&nbsp;=&nbsp;0.5f;</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>127</code></td><td class="light"><code></code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>128</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;force&nbsp;=&nbsp;_thruster.Engage(energyScalingFactor);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>129</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(_position,&nbsp;force.Displacement);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>130</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.AreEqual(_direction&nbsp;*&nbsp;expectedCappedEnergyScalingFactor&nbsp;*&nbsp;_thruster.Throttle,&nbsp;force.Vector);</code></td></tr>
<tr><td class="green">&nbsp;</td><td class="leftmargin right">1</td><td class="right"><code>131</code></td><td><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>132</code></td><td class="light"><code></code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>133</code></td><td class="light"><code>&nbsp;&nbsp;&nbsp;&nbsp;}</code></td></tr>
<tr><td class="gray">&nbsp;</td><td class="leftmargin right"></td><td class="right"><code>134</code></td><td class="light"><code>}</code></td></tr>
</table>
<div class="footer">Generated by: ReportGenerator 1.6.1.0<br />03/11/2012 - 13:29:01<br /><a href="http://www.palmmedia.de">www.palmmedia.de</a></div></div></body></html>